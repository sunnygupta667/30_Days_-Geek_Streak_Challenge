
class Solution {
    public String longestCommonPrefix(String arr[]) {
        int small=0;
        for(int i=1;i<arr.length;i++) {
            if(arr[i].length()<arr[small].length())
                small=i;
        }
        String ans=arr[small];
        int i=0;
        int j=0;
        while(i<ans.length())  {
            for(j=0;j<arr.length;j++) {
                if(arr[j].charAt(i)!=ans.charAt(i))
                    break;
            }
            if(j!=arr.length)
                break;
            i++;
        }
        if(i==0)
            return "-1";
        return ans.substring(0,i);
    }
}

Explanation: 
Initial Check:
If the input array is null or empty, the method immediately returns -1.
Iterate Over Characters of the First String:
The method loops through each character of the first string in the array. This string serves as the reference for comparison.
Compare with Other Strings:
For each character in the first string, the method checks if the same character exists at the same position in all other strings in the array:
If a string is shorter than the current character position (i), or if the character doesn't match the first string, the method returns the prefix found so far.
Building the Prefix:
If all strings share the same character at position i, that character is added to the result.
Final Result:
If the method completes the loop, it returns the accumulated prefix. If no prefix is found (i.e., result is empty), it returns -1.
