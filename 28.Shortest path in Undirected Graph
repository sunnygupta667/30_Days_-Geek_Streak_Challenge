class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
          List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++) adj.add(new ArrayList<>());
        for(int[] e:edges){
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }
        int dis[]=new int[n];
        Arrays.fill(dis,Integer.MAX_VALUE);
        Queue<int[]> q=new LinkedList<>();
        q.add(new int[]{src,0});
        while(!q.isEmpty()){
            int[] curr=q.poll();
            int node=curr[0],d=curr[1];
            if(d<dis[node]) dis[node]=d;
            for(int i:adj.get(node)){
                if(d+1<dis[i]){
                    dis[i]=d+1;
                    q.add(new int[]{i,d+1});
                }
            }
        }
        for(int i=0;i<n;i++) if(dis[i]==Integer.MAX_VALUE) dis[i]=-1;
        return dis;
    }
}
