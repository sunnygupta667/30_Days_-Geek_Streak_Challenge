
class Pair<A, B> {
    public final A first;
    public final B second;
    
    public Pair(A first, B second) {
        this.first = first;
        this.second = second;
    }
}

class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        ArrayList<Integer> result=new ArrayList<>();
        if(root==null) return result;
        
        Map<Integer, Pair<Integer, Integer>> map=new TreeMap<>();
        Queue<Pair<Node, Integer>> queue=new LinkedList<>();
        queue.offer(new Pair<>(root,0));
        
        while(!queue.isEmpty())
        {
            int size=queue.size();
            for(int i=0;i<size;i++)
            {
                Pair<Node, Integer> current=queue.poll();
                Node node=current.first;
                int hd=current.second;
                map.put(hd, new Pair<>(node.data, hd));
                
                if(node.left!=null)
                    queue.offer(new Pair<>(node.left, hd-1));
                    
                if(node.right!=null)
                    queue.offer(new Pair<>(node.right, hd+1));
            }
        }
        for (Pair<Integer, Integer> pair : map.values()) {
            result.add(pair.first);
        }
        return result;
    }
}
